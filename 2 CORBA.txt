Problem Statement: 
 
To develop any distributed application with CORBA program using JAVA IDL. 
 
Tools / Environment: 
 
Java Programming Environment, JDK 1.8 
 
Related Theory: 
 
Common Object Request Broker Architecture (CORBA): 
 
CORBA is an acronym for Common Object Request Broker Architecture. It is an open source, vendor-independent architecture and infrastructure developed by the Object Management Group (OMG) to integrate enterprise applications across a distributed network. CORBA specifications provide guidelines for such integration applications, based on the way they want to interact, irrespective of the technology; hence, all kinds of technologies can implement these standards using their own technical implementations. 

 
An Object Request Broker (ORB) is part of the Java Platform. The ORB is a runtime component that can be used for distributed computing using IIOP communication. Java IDL is a Java API for interoperability and integration with CORBA. 


 Implementing the solution: 	 
 
Here, we are demonstrating the "Hello World" Example. To create this example, create a directory named hello/ where you develop sample applications and create the files in this directory. 
1.	Defining the Interface (Hello.idl) 
The first step to creating a CORBA application is to specify all of your objects and their interfaces using the OMG's Interface Definition Language (IDL).To complete the application, you simply provide the server (HelloServer.java) and client (HelloClient.java) implementations. 
 
2.	Implementing the Server (HelloServer.java) 
The example server consists of two classes, the servant and the server. The servant, HelloImpl, is the implementation of the Hello IDL interface; each Hello instance is implemented by a HelloImpl instance. The servant is a subclass of HelloPOA, which is generated by the idlj compiler from the example IDL. The servant contains one method for each IDL operation, in this example, the sayHello() and shutdown() methods. Servant methods are just like ordinary Java methods; the extra code to deal with the ORB, with marshaling arguments and results, and so on, is provided by the skeleton. 
 
The HelloServer class has the server's main() method, which: 
 
•	Creates and initializes an ORB instance
•	Gets a reference to the root POA and activates the POAManager
•	Creates a servant instance (the implementation of one CORBA Hello object) and tells the ORB about it
•	Gets a CORBA object reference for a naming context in which to register the new CORBA object
•	Gets the root naming context
•	Registers the new object in the naming context under the name "Hello"
•	Waits for invocations of the new object from the client.
 
 
3.	Implementing the Client Application (HelloClient.java) The example application client that follows: 
 
•	Creates and initializes an ORB
•	Obtains a reference to the root naming context
•	Looks up "Hello" in the naming context and receives a reference to that CORBA object
•	Invokes the object's sayHello() and shutdown() operations and prints the result.
 
   
 
 
 
 Conclusion: 	 
 
CORBA provides the network transparency, Java provides the implementation transparency. 
CORBA complements the Java™ platform by providing a distributed object framework, services to support that framework, and interoperability with other languages. The Java platform complements CORBA by providing a portable, highly productive implementation environment. The combination of Java and CORBA allows you to build more scalable and more capable applications than can be built using the JDK alone. 
 
